{"version":3,"sources":["store/auth/types.ts","store/item/types.ts","store/auth/reducer.ts","store/item/reducer.ts","store/rootReducer.ts","store/index.ts","routes/routes.ts","routes/index.tsx","components/App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["GET_USER","started","success","failed","LOGIN","UPDATE_PASSWORD","CHECK_PHONE","CHECK_CODE","REGISTER","GET_ITEMS","CREATE_OFFER","authReducer","combineReducers","user","state","data","loading","action","type","errorMessage","undefined","userToken","user_token","user_error","userInfo","user_info","errorPassword","parseItemsData","raw","id","foodName","food_name","producerId","producer_id","price","initialQuantity","initial_quantity","availableQuantity","available_quantity","location","created","parsePlacesData","name","itemReducer","items","list","parsedData","map","n","places","rootReducer","history","router","connectRouter","createHistory","middlewares","routerMiddleware","thunkMiddleware","createLogger","predicate","level","collapsed","enhancers","applyMiddleware","persistConfig","storage","key","blacklist","persistedReducer","persistReducer","Main","loadable","modules","Map","Cabinet","Password","Detail","Login","Register","Offer","MainRoutes","exact","path","component","store","initialState","createStore","persistor","persistStore","configureStore","App","Boolean","window","hostname","match","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fc0df88.chunk.js","sourcesContent":["\r\nexport const GET_USER = {\r\n  started: 'GET_USER_START',\r\n  success: 'GET_USER_SUCCESS',\r\n  failed: 'GET_USER_FAILED',\r\n};\r\n\r\nexport const LOGIN = {\r\n  started: 'LOGIN_START',\r\n  success: 'LOGIN_SUCCESS',\r\n  failed: 'LOGIN_FAILED',\r\n};\r\n\r\nexport const UPDATE_PASSWORD = {\r\n  started: 'UPDATE_PASSWORD_START',\r\n  success: 'UPDATE_PASSWORD_SUCCESS',\r\n  failed: 'UPDATE_PASSWORD_FAILED',\r\n};\r\n\r\nexport const CHECK_PHONE = {\r\n  started: 'CHECK_PHONE_START',\r\n  success: 'CHECK_PHONE_SUCCESS',\r\n  failed: 'CHECK_PHONE_FAILED',\r\n};\r\n\r\nexport const CHECK_CODE = {\r\n  started: 'CHECK_CODE_START',\r\n  success: 'CHECK_CODE_SUCCESS',\r\n  failed: 'CHECK_CODE_FAILED',\r\n};\r\n\r\nexport const REGISTER = {\r\n  started: 'REGISTER_START',\r\n  success: 'REGISTER_SUCCESS',\r\n  failed: 'REGISTER_FAILED',\r\n};\r\n","export const GET_ITEMS = {\n  started: 'GET_ITEMS_START',\n  success: 'GET_ITEMS_SUCCESS',\n  failed: 'GET_ITEMS_FAILED',\n};\n\nexport const CREATE_OFFER = {\n  started: 'CREATE_OFFER_START',\n  success: 'CREATE_OFFER_SUCCESS',\n  failed: 'CREATE_OFFER_FAILED',\n};\n","import { combineReducers } from 'redux';\r\nimport { ILoadTypes } from 'src/store/types';\r\nimport { GET_USER, LOGIN, UPDATE_PASSWORD } from './types';\r\n\r\nconst user = (\r\n    state = { data: null, loading: false }, action: any): ILoadTypes<any | null> => {\r\n  switch (action.type) {\r\n    case GET_USER.failed:\r\n      return {\r\n        data: null,\r\n        errorMessage: action.errorMessage,\r\n        loading: true,\r\n      };\r\n    case GET_USER.success:\r\n      if (!action.user) {\r\n        return {\r\n          data: null,\r\n          errorMessage: undefined,\r\n          loading: false,\r\n        };\r\n      }\r\n      return {\r\n        data: action.user,\r\n        errorMessage: undefined,\r\n        loading: false,\r\n      };\r\n    case GET_USER.started:\r\n      return {\r\n        data: null,\r\n        errorMessage: undefined,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userToken = (state = null, action: any) => {\r\n  switch (action.type) {\r\n    case LOGIN.success:\r\n      return (action.user_token || null);\r\n    case LOGIN.failed:\r\n      return (action.user_error || null);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst userInfo = (state = null, action: any) => {\r\n  switch (action.type) {\r\n    case LOGIN.success:\r\n      return (action.user_info || null);\r\n    case LOGIN.failed:\r\n      return (action.user_error || null);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst errorPassword = (state = null, action: any) => {\r\n  switch (action.type) {\r\n    case UPDATE_PASSWORD.success:\r\n      return (action.user_info || null);\r\n    case UPDATE_PASSWORD.failed:\r\n      return (action.errorPassword || null);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst authReducer = combineReducers({\r\n  user,\r\n  userToken,\r\n  userInfo,\r\n  errorPassword,\r\n});\r\n\r\nexport default authReducer;\r\n","import { combineReducers } from 'redux';\nimport { ActionType, ILoadTypes } from 'src/store/types';\nimport { GET_ITEMS } from 'src/store/item/types';\nimport { IItem } from 'src/store/data.types';\nimport { CardItemTypes } from 'src/components/molecules/CardItem/types';\n\nexport const parseItemsData = (raw: IItem): CardItemTypes.IProps => ({\n  id: raw.id,\n  foodName: raw.food_name,\n  producerId: raw.producer_id,\n  price: raw.price,\n  initialQuantity: raw.initial_quantity,\n  availableQuantity: raw.available_quantity,\n  location: raw.location,\n  created: raw.created,\n});\n\nconst items = (\n  state = { data: [], loading: false },\n  action: ActionType<IItem[]>,\n): ILoadTypes<CardItemTypes.IProps[] | []> => {\n  switch (action.type) {\n    case GET_ITEMS.started:\n      return {\n        data: [],\n        loading: true,\n      };\n    case GET_ITEMS.failed:\n      return {\n        data: [],\n        errorMessage: action.errorMessage,\n        loading: false,\n      };\n    case GET_ITEMS.success:\n      if (!action.list) {\n        return {\n          data: [],\n          loading: false,\n        };\n      }\n      const parsedData = action.list.map((n: IItem) => parseItemsData(n));\n      return {\n        data: parsedData,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const parsePlacesData = (raw: IItem): any => ({\n  price: raw.price,\n  name: raw.food_name,\n  location: raw.location,\n});\n\nconst places = (\n  state = { data: [], loading: false }, action: any): any => {\n  switch (action.type) {\n    case GET_ITEMS.started:\n      return {\n        data: [],\n        loading: true,\n      };\n    case GET_ITEMS.failed:\n      return {\n        data: [],\n        errorMessage: action.errorMessage,\n        loading: false,\n      };\n    case GET_ITEMS.success:\n      if (!action.list) {\n        return {\n          data: [],\n          loading: false,\n        };\n      }\n      const parsedData = action.list.map((n: IItem) => parsePlacesData(n));\n      return {\n        data: parsedData,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst itemReducer = combineReducers({\n  items,\n  places,\n});\n\nexport default itemReducer;\n","import { combineReducers } from 'redux';\nimport { History } from 'history';\nimport { connectRouter } from 'connected-react-router';\nimport authReducer from 'src/store/auth/reducer';\nimport itemReducer from 'src/store/item/reducer';\n\nconst rootReducer = (history: History) => combineReducers({\n  authReducer,\n  itemReducer,\n  router: connectRouter(history),\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory as createHistory } from 'history';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './rootReducer';\n// import fetchMiddleware from '../middleware/fetchMiddleware';\n\n// #constants\nconst isProd = process.env.NODE_ENV === 'production';\nexport const history = createHistory();\n\n// #createStore : enhancer\n\n// #logger middleware (dev only)\nconst middlewares = [\n  routerMiddleware(history),\n  thunkMiddleware,\n  createLogger({\n    predicate: () => !isProd,\n    level: 'info',\n    collapsed: true,\n  }),\n];\nconst enhancers = [applyMiddleware(...middlewares)];\n\n// # persisted reducer\nconst persistConfig = {\n  storage,\n  key: 'root',\n  blacklist: ['router'],\n};\n\nconst persistedReducer = persistReducer(\n  persistConfig,\n  rootReducer(history),\n);\n\nexport default function configureStore(initialState = {}) {\n  const store = createStore(persistedReducer, initialState, ...enhancers);\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n","import loadable from 'loadable-components';\n\nexport const Main = loadable(() => import('src/pages/Main'), {\n  modules: ['main'],\n});\nexport const Map = loadable(() => import('src/pages/Map'), {\n  modules: ['map'],\n});\nexport const Cabinet = loadable(() => import('src/pages/Cabinet'), {\n  modules: ['cabinet'],\n});\nexport const Password = loadable(() => import('src/pages/Cabinet/PasswordUpdatePage'), {\n  modules: ['cabinet/password'],\n});\nexport const Detail = loadable(() => import('src/pages/Detail'), {\n  modules: ['detail'],\n});\nexport const Login = loadable(() => import('src/pages/Login'), {\n  modules: ['login'],\n});\nexport const Register = loadable(() => import('src/pages/Register'), {\n  modules: ['register'],\n});\nexport const Offer = loadable(() => import('src/pages/Offer'), {\n  modules: ['offer'],\n});\n\n// export const PageNotFound = loadable(() => import('../pages/pageNotFound'), {\n//   modules: ['pageNotFound'],\n// });\n// export const PrivateRoute = loadable(\n//   () => import('../components/privateRoute/PrivateRoute'),\n//   { modules: ['PrivateRoute'] },\n// );\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Main, Cabinet, Detail, Login, Map, Offer, Password, Register } from './routes';\n// import LogoutRoute from '../components/logoutRoute';\n// import PrivateRoute from '../components/privateRoute';\n\nconst MainRoutes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route exact path=\"/cabinet\" component={Cabinet} />\n      <Route path=\"/cabinet/password\" component={Password} />\n      <Route path=\"/detail\" component={Detail} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/map\" component={Map} />\n      <Route path=\"/offer\" component={Offer} />\n      {/* <PrivateRoute path=\"/protected\" component={Protected} /> */}\n      {/* <LogoutRoute path=\"/logout\" /> */}\n      {/* <Route path=\"*\" component={PageNotFound} /> */}\n    </Switch>\n  );\n};\n\nexport default MainRoutes;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport configureStore, { history } from 'src/store';\nimport MainRoutes from 'src/routes';\n\nconst { store } = configureStore({});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <MainRoutes />\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'ru',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'src/components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'src/assets/scss/main.scss';\nimport 'src/i18n';\n\nReactDOM.render(\n  <React.Suspense fallback=\"Loading\">\n    <App />\n  </React.Suspense>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}