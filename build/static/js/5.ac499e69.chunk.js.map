{"version":3,"sources":["components/molecules/CardItem/index.tsx","components/molecules/CardItem/CardItemGroup.tsx","pages/Main/index.tsx","store/defaultAction.ts","constants/server.ts","store/defaultApi.ts","components/molecules/TabBar/index.tsx","store/item/api.ts","store/item/actions.ts","components/atoms/SearchToggler/index.tsx"],"names":["CardItem","props","producerId","foodName","price","availableQuantity","location","created","className","fromNow","join","CardItemGroup","items","length","map","n","key","id","mapDispatchToProps","getItems","itemActions","connect","state","itemReducer","data","useState","didMount","setDidMount","useEffect","SearchToggler","link","title","TabBar","defaultAction","dispatch","getState","options","responseType","callbacks","type","action","started","apiCall","then","response","status","text","value","responseObject","success","onSuccess","JSON","parse","val","failed","onError","message","errorMessage","error","API_URL","modifyHeader","headers","Accept","Token","sessionStorage","getItem","token","stdApiPOST","fetch","url","method","body","stringify","stdApiGET","stdApiPUT","to","activeClassName","icon","faHome","color","faMapMarked","faPlusSquare","faHistory","faUserCircle","itemsUrl","createOfferUrl","GET_ITEMS","list","description","createOffer","CREATE_OFFER","api","window","replace","user_token","console","log","Error","faFilter"],"mappings":"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","file":"static/js/5.ac499e69.chunk.js","sourcesContent":["import * as React from 'react';\nimport Moment from 'react-moment';\nimport 'moment/locale/ru';\nimport { CardItemTypes } from 'src/components/molecules/CardItem/types';\nimport './index.scss';\n\nfunction CardItem(props: CardItemTypes.IProps) {\n  const {\n    producerId,\n    foodName,\n    price,\n    availableQuantity,\n    location,\n    created,\n  } = props;\n  return (\n    <>\n      <div className=\"card-item base-shadow d-flex flex-column container my-10\">\n        <div className=\"d-flex flex-row justify-content-between p-12\">\n          <h2 className=\"card-item__price\">{price} ₸</h2>\n          <p>Пользователь #{producerId}</p>\n        </div>\n        <div className=\"d-flex flex-column p-12\">\n          <h3 className=\"card-item__title my-4\">{foodName}<br/></h3>\n          <h3 className=\"card-item__quantity\">порции: {availableQuantity} <br/></h3>\n        </div>\n        <hr className=\"card-item__divider px-12\" />\n        <div className=\"card-item__created-info d-flex flex-row p-12 justify-content-between\">\n          {created && <Moment fromNow>{created}</Moment>}\n          <p>{location.join(', ')}</p>\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default CardItem;\n","import * as React from 'react';\n// import { Link } from 'react-router-dom';\nimport CardItem from 'src/components/molecules/CardItem';\nimport { CardItemTypes, CardItemGroupTypes } from 'src/components/molecules/CardItem/types';\n\nfunction CardItemGroup(props: CardItemGroupTypes.IProps): JSX.Element {\n  const { items } = props;\n  return (\n    <>\n    <h4 className=\"container mt-40 mb-16\">Предложения ({items?.length})</h4>\n      {\n        items && items.map((n: CardItemTypes.IProps) => {\n          return (<React.Fragment key={n.id}>\n            {/* <Link key={n.id} to={`/detail/${n.id}`} className=\"card-group__link\"> */}\n              <CardItem\n                {...n}\n              />\n            {/* </Link> */}\n          </React.Fragment>\n          );\n        })}\n    </>\n  );\n}\n\nexport default CardItemGroup;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport itemActions from 'src/store/item/actions';\n\nimport SearchToggler from 'src/components/atoms/SearchToggler';\nimport TabBar from 'src/components/molecules/TabBar';\nimport CardItemGroup from 'src/components/molecules/CardItem/CardItemGroup';\nimport { MainPageTypes } from './types';\n\nfunction MainPage(props: MainPageTypes.IProps) {\n  const { items, getItems } = props;\n  const [didMount, setDidMount] = useState(false);\n\n  useEffect(() => {\n    if (!didMount) {\n      setDidMount(true);\n      getItems && getItems();\n    }\n  },\n  [didMount, getItems],\n  );\n\n  return (\n    <div>\n      <SearchToggler link=\"/map\" title=\"На карте\" />\n      <CardItemGroup items={items} />\n      <TabBar />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  return ({\n    items: state.itemReducer.items.data,\n  });\n};\n\nconst mapDispatchToProps = {\n  getItems: itemActions.getItems,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\n","export const defaultAction = (dispatch: any, getState: any , options: any, responseType?: string) => {\n  const callbacks = options.callbacks || {};\n  dispatch({ type: options.action.started });\n  options.apiCall()\n        .then(\n            (response: any) => {\n              switch (response.status) {\n                case 200:\n                case 201:\n                  response\n                    .text()\n                    .then(\n                      (value: any) => {\n                        if (responseType) {\n                          const responseObject = `data:image/png;base64,${value}`;\n                          dispatch({\n                            type: options.action.success,\n                            ...options.onSuccess(responseObject),\n                          });\n                          if (callbacks.onSuccess) {\n                            callbacks.onSuccess(options.onSuccess(responseObject));\n                          }\n                        } else {\n                          const responseObject = JSON.parse(value);\n                          dispatch({\n                            type: options.action.success,\n                            ...options.onSuccess(responseObject),\n                          });\n                          if (callbacks.onSuccess) {\n                            callbacks.onSuccess(options.onSuccess(responseObject));\n                          }\n                        }\n                      },\n                    );\n                  break;\n                case 230:\n                  response\n                    .text()\n                    .then(\n                        (value: any) => {\n                          dispatch({\n                            type: options.action.success,\n                            ...options.onSuccess(true),\n                          });\n                          if (callbacks.onSuccess) {\n                            callbacks.onSuccess(options.onSuccess(true));\n                          }\n                        },\n                    );\n                  break;\n                case 500:\n                  response\n                    .text()\n                    .then((val: any) => {\n                      dispatch({\n                        type: options.action.failed,\n                        ...options.onError({ message: 'ошибка 500!' }),\n                      });\n                    });\n                  break;\n                case 504:\n                  response\n                    .text()\n                    .then((val: any) => {\n                      dispatch({\n                        type: options.action.failed,\n                        ...options.onError({ message: 'serverError' }),\n                      });\n                    });\n                  break;\n                default:\n                  dispatch({\n                    type: options.action.failed,\n                    errorMessage: `Ошибка #${response.status}`,\n                  });\n              }\n            },\n            (error: any) => {\n              dispatch({\n                type: options.action.failed,\n                errorMessage: 'Проверьте соединение',\n                ...options.onError({ message: 'serverError' }),\n              });\n            },\n        );\n};\n","const env = process.env.NODE_ENV;\nexport const API_URL = (\n  env === 'production' ?\n    // prod\n    'http://185.22.67.118:8080/'\n  : env === 'development' ?\n    // dev\n    'http://185.22.67.118:8080/'\n  :\n    // local\n    'http://185.22.67.118:8080/'\n);\n","const modifyHeader = (options: any) => {\n  const headers = { ...{\n    Accept: 'application/json, application/xml, text/plain, text/html, *.*',\n    Token: `${sessionStorage.getItem('token')}`,\n    'Content-Type': 'application/json',\n  } };\n\n  if (!!options.token) {\n    headers['Token'] = `Bearer ${options.token}`;\n  }\n\n  return headers;\n};\n\nexport const stdApiPOST = (options: any) => {\n  return (\n    fetch(\n      options.url,\n      {\n        method: 'POST',\n        headers: modifyHeader(options),\n        body: JSON.stringify(options.data || {}),\n      },\n    )\n  );\n};\n\nexport const stdApiGET = (options: any) => {\n  return (\n    fetch(\n      options.url,\n      {\n        method: 'GET',\n        headers: modifyHeader(options),\n      },\n    )\n  );\n};\n\nexport const stdApiPUT = (options: any) => {\n  return (\n    options.data ?\n    fetch(\n      options.url,\n      {\n        method: 'PUT',\n        headers: modifyHeader(options),\n        body: JSON.stringify(options.data || {}),\n      },\n    )\n    :\n    fetch(\n      options.url,\n      {\n        method: 'PUT',\n        headers: modifyHeader(options),\n      },\n    )\n  );\n};\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faMapMarked, faPlusSquare, faHistory, faUserCircle } from '@fortawesome/free-solid-svg-icons';\nimport './index.scss';\n\nfunction TabBar() {\n  return(\n    <div className=\"container tabbar d-flex flex-row justify-content-between pt-12 pb-20 fill_w\">\n      <NavLink to=\"/\" activeClassName=\"tabbar__activeLink text-decoration-none ml-14\">\n        <div className=\"tabbar__item text-center pb-8 px-8\">\n          <FontAwesomeIcon className=\"tabbar__item--icon ml-6 pb-4\" icon={faHome} color=\"\" />\n          <p>\n            Главная\n          </p>\n        </div>\n      </NavLink>\n      <NavLink to=\"/map\" activeClassName=\"tabbar__activeLink text-decoration-none\">\n        <div className=\"tabbar__item text-center pb-8 px-8\">\n          <FontAwesomeIcon className=\"tabbar__item--icon pb-4\" icon={faMapMarked} color=\"\" />\n          <p>\n            Карта\n          </p>\n        </div>\n      </NavLink>\n      <NavLink to=\"/offer\" activeClassName=\"tabbar__activeLink text-decoration-none\">\n        <div className=\"tabbar__item text-center pb-8 px-8\">\n          <FontAwesomeIcon className=\"tabbar__item--icon ml-8 pb-4\" icon={faPlusSquare} color=\"#00BBFF\" />\n          <p className=\"tabbar__item--center\">\n            Создать\n          </p>\n        </div>\n      </NavLink>\n      <NavLink to=\"/login\" activeClassName=\"tabbar__activeLink text-decoration-none\">\n        <div className=\"tabbar__item text-center pb-8 px-8\">\n          <FontAwesomeIcon className=\"tabbar__item--icon ml-8 pb-4\" icon={faHistory} color=\"\" />\n          <p>\n            История\n          </p>\n        </div>\n      </NavLink>\n      <NavLink to=\"/cabinet\" activeClassName=\"tabbar__activeLink text-decoration-none\">\n        <div className=\"tabbar__item text-center pb-8 px-8\">\n          <FontAwesomeIcon className=\"tabbar__item--icon ml-8 pb-4\" icon={faUserCircle} color=\"\" />\n          <p>\n            Кабинет\n          </p>\n        </div>\n      </NavLink>\n\n    </div>\n  )\n}\n\nexport default TabBar;\n","import { API_URL } from 'src/constants/server';\nimport { stdApiGET, stdApiPOST } from 'src/store/defaultApi';\n\nconst id = sessionStorage.getItem('userId');\n\nconst itemsUrl = `${API_URL}api/offer`;\nconst createOfferUrl = `${API_URL}api/producer/${id}/offer`;\n\nexport const getItems = () => (\n  stdApiGET({ url: `${itemsUrl}` })\n);\n\nexport const createOffer = (data: any) => (\n  stdApiPOST({ data, url: `${createOfferUrl}` })\n);\n","import { defaultAction } from 'src/store/defaultAction';\nimport * as api from 'src/store/item/api';\nimport { GET_ITEMS, CREATE_OFFER } from 'src/store/item/types';\n\nexport const getItems = (callbacks?: any) => (dispatch: any, getState: any) => {\n  defaultAction(dispatch, getState, {\n    callbacks,\n    action: GET_ITEMS,\n    apiCall: () => {\n      return api.getItems();\n    },\n    onSuccess: (response: any) => ({ list: response }),\n    onError: (response: any) => ({ errorMessage: response.description }),\n  });\n};\n\nexport const createOffer = (data: any, callbacks?: any) => (dispatch?: any, getState?: any) => {\n  defaultAction(dispatch, getState, {\n    callbacks,\n    action: CREATE_OFFER,\n    apiCall: () => { return api.createOffer(data); },\n    onSuccess: (response: any) => {\n      window.location.replace('/');\n      return { user_token: response.Token };\n    },\n    onError: (response: any) => {\n      console.log('token-error');\n      response.Error === \"Couldn't find token\" && window.location.replace('/login');\n      return { user_token: response.Error };\n    },\n  });\n};\n\nexport default{\n  getItems,\n  createOffer,\n};\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\n\nimport './index.scss';\nimport { SearchTogglerTypes } from './types';\n\nfunction SearchToggler(props: SearchTogglerTypes.IProps) {\n  const { link, title } = props;\n  return (\n    <div className=\"search-toggler container mb-8\">\n      <div className=\"d-flex flex-row justify-content-between text-main\">\n        <div className=\"search-toggler__item p-12 fill_w text-center\">\n          <NavLink className=\"text-main text-decoration-none\" to={link}>\n            <p className=\"fill_w\">\n              {title}\n            </p>\n          </NavLink>\n        </div>\n        <div className=\"p-12 fill_w text-center\">\n          <p className=\"fill_w\">\n            Фильтры\n              <FontAwesomeIcon className=\"ml-8\" color=\"#888888\" icon={faFilter} />\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchToggler;\n"],"sourceRoot":""}